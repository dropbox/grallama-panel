{"version":3,"sources":["../src/grallama_ctrl.js"],"names":["MetricsPanelCtrl","_","kbn","TimeSeries","rendering","GraLLAMACtrl","$scope","$injector","$rootScope","panelDefaults","legend","show","values","links","datasource","maxDataPoints","interval","targets","cacheTimeout","nullPointMode","legendType","aliasColors","format","valueName","valueNameOptions","text","value","strokeWidth","fontSize","combine","threshold","label","tooltipHover","colorBackground","colorValue","colors","thresholds","xAxisLabel","yAxisLabel","separator","defaults","panel","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","addEditorTab","unitFormats","getUnitFormats","subItem","render","series","color","alias","data","parseSeries","matrix","parseMatrix","yCats","Set","xCats","split","map","strVale","Number","trim","angular","forEach","datapoint","agg","stats","datavalue","toFixed","yCat","xCat","add","Array","from","sort","rowNum","colNum","push","style","toString","cell","limit","i","cells","serie","dataList","seriesHandler","seriesData","datapoints","target","flotpairs","getFlotPairs","scope","elem","attrs","ctrl","options","background","reverse","panelColorIndex","templateUrl"],"mappings":"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","file":"grallama_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series';\nimport rendering from './rendering';\n\nexport class GraLLAMACtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n\n    var panelDefaults = {\n      legend: {\n        show: true, // disable/enable legend\n        values: true\n      },\n      links: [],\n      datasource: null,\n      maxDataPoints: 3,\n      interval: null,\n      targets: [{}],\n      cacheTimeout: null,\n      nullPointMode: 'connected',\n      legendType: 'Under graph',\n      aliasColors: {},\n      format: 'short',\n      valueName: 'avg',\n      valueNameOptions: [\n        { text: \"Min\", value: \"min\" },\n        { text: \"Max\", value: \"max\" },\n        { text: \"Average\", value: \"avg\" },\n        { text: \"Current\", value: \"current\" },\n        { text: \"Total\", value: \"total\" }\n      ],\n      strokeWidth: 1,\n      fontSize: '60%',\n      combine: {\n        threshold: 0.0,\n        label: 'Others'\n      },\n      tooltipHover: false, // Should there be a tooltip for cells\n      colorBackground: true, // Should the cell background be colored\n      colorValue: false, // Should the cell value be colored\n      colors: ['#6ea009', \"#D38E02\", \"#C86501\", \"#BD3D01\", \"#AD0000\"],\n      thresholds: '0,0.2,1,5,99',\n      xAxisLabel: 'X-Axis',\n      yAxisLabel: 'Y-Axis',\n      separator: '-',\n    };\n\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Axes', 'public/plugins/dropbox-grallama-panel/axes_editor.html', 2);\n    this.addEditorTab('Options', 'public/plugins/dropbox-grallama-panel/options_editor.html', 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  changeSeriesColor(series, color) {\n    series.color = color;\n    this.panel.aliasColors[series.alias] = series.color;\n    this.render();\n  }\n\n  onRender() {\n    this.data = this.parseSeries(this.series);\n    this.matrix = this.parseMatrix(this.series);\n  }\n\n  parseMatrix(series) {\n      var matrix = {};\n      matrix['data'] = {}; // Raw data\n      matrix['cells'] = []; // Cells to render\n      // Unique values for each row and column\n      var yCats = new Set();\n      var xCats = new Set();\n      // These are needed for referencing in loops below\n      let colorBackground = this.panel.colorBackground;\n      let colorValue = this.panel.colorValue;\n      let thresholds = this.panel.thresholds.split(',').map(function(strVale) {\n        return Number(strVale.trim());\n      });\n      let colors = this.panel.colors;\n      let separator = this.panel.separator;\n      let valueName = this.panel.valueName;\n      // Parse all the series into their buckets\n      angular.forEach(series, function(datapoint) {\n      var agg = datapoint.stats[valueName];\n      var datavalue = Number(agg).toFixed(1);\n      let [yCat, xCat] = datapoint.label.split(separator);\n      yCats.add(yCat);\n      xCats.add(xCat);\n      if (!(yCat in matrix.data)) {\n        // Create the object if it doesn't exist\n        matrix.data[yCat] = {};\n      }\n      matrix.data[yCat][xCat] = datavalue;\n      });\n\n      // Sort the axis categories\n      yCats = Array.from(yCats).sort();\n      xCats = Array.from(xCats).sort();\n\n      // Create the x axis label cells for the matrix\n      let rowNum = 1;\n      let colNum = 1;\n      for (let xCat of xCats) {\n        colNum++;  // Start 1 cell in, like the data\n        matrix['cells'].push({\n          value: xCat,\n          style: {\n            \"grid-row\": rowNum.toString(),\n            \"grid-column\": colNum.toString(),\n          }\n        });\n      }\n\n      // Create the rest of the rows\n      for (let yCat of yCats) {\n        rowNum++; // Start 1 cell in, like the data\n        colNum = 1; // This needs to be reset for each row\n        // Add a cell for the row header\n        matrix['cells'].push({\n          value: yCat,\n          style: {\n            \"grid-row\": rowNum.toString(),\n            \"grid-column\": colNum.toString(),\n            \"white-space\": \"nowrap\",  // Should move this into external CSS\n            \"text-align\": \"right\",  // Should move this into external CSS\n          }\n        });\n        // Create the data cells\n        for (let xCat of xCats) {\n          colNum++;\n          let value = matrix.data[yCat][xCat];\n          let cell = {\n            'yCat': yCat,\n            'xCat': xCat,\n            'value': value,\n            'tooltip': this.panel.tooltipHover,\n            'style': {\n              // These must be strings, otherwise they get silently ignored\n              'grid-row': rowNum.toString(),\n              'grid-column': colNum.toString(),\n            },\n          };\n          // Add coloring to the cell (if needed) and only if it has a value\n          if ((colorBackground || colorValue) && cell.value) {\n              let color = colors[0]; // Start with the base, and update if greater than thresholds\n              angular.forEach(thresholds, function(limit, i) {\n                if (cell.value >= limit) { color = colors[i+1]; }\n              });\n              if (colorBackground) { cell.style['background-color'] = color; }\n              if (colorValue) { cell.style['color'] = color; }\n          }\n          // Add the cell to the matrix\n          matrix.cells.push(cell)\n        }\n      }\n      return matrix;\n  }\n\n  parseSeries(series) {\n    return _.map(this.series, (serie, i) => {\n      return {\n        label: serie.alias,\n        data: serie.stats[this.panel.valueName],\n        color: this.panel.aliasColors[serie.alias] || this.$rootScope.colors[i]\n      };\n    });\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    this.data = this.parseSeries(this.series);\n    this.matrix = this.parseMatrix(this.series);\n    this.render(this.data);\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n// Stolen from SingleStat\n// Try to subclass at some point to get this for free\n// I don't think we're actually using this specific option at the moment.\n  setColoring(options) {\n    if (options.background) {\n      this.panel.colorValue = false;\n      this.panel.colors = ['rgba(71, 212, 59, 0.4)', 'rgba(245, 150, 40, 0.73)', 'rgba(225, 40, 40, 0.59)'];\n    } else {\n      this.panel.colorBackground = false;\n      this.panel.colors = ['rgba(50, 172, 45, 0.97)', 'rgba(237, 129, 40, 0.89)', 'rgba(245, 54, 54, 0.9)'];\n    }\n    this.render();\n  }\n\n  invertColorOrder() {\n    // This seems to be designed for only 3\n    // var tmp = this.panel.colors[0];\n    // this.panel.colors[0] = this.panel.colors[2];\n    // this.panel.colors[2] = tmp;\n    // This is so much cleaner, easier, and scalable\n    this.panel.colors.reverse();\n    this.render();\n  }\n\n  onColorChange(panelColorIndex) {\n    return color => {\n      this.panel.colors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n\n}\n\nGraLLAMACtrl.templateUrl = 'module.html';\n"]}